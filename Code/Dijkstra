#define MAXVEX 9
#define INFINITY 65535
typedef int Patharc[MAXVEX];//用于存储最短路径下标的数组
typedef int ShortPathTable[MAXVEX];//用于存储到各个点最短路径的权值和
//Dijkstra算法，求有向网G的V0顶点到其余顶点V最短路径P[v]及带权长度D[v]
//P[v]的值为前驱顶点下标，D[v]表示V0到V的最短路径长度和
void ShortestPath_Dijkstra(MGraph G,int V0,Patharc *P,ShortPathTable *D)
{
  int v, w, k, min;
  int  final[MAXVEX];//final[w]=1表示求得顶点V0到Vw的最短路径
  for(v=0;v<G.numVertexes;v++)//初始化数组
  {
    final[v]=0//全部顶点初始化为未知最短路径状态
    (*D)[v]=G.arc[V0][V];//将与V0点有连线的顶点加上权值
    (*P)[v]=0;//初始化路径数组P为0
  }
  (*D)[V0]=0;//V0至V0路径为0
  final[V0]=1;//V0至V0不需要求路径
  //开始主循环，每次求得V0到某个V顶点的最短路径
  for(v=1;v<G.numVertexes;v++)
  {
    min=INFINITY;//当前所知离V0顶点的最近距离
    for(w=0lw<G.numVertexes;w++)//寻找离V0最近的顶点
    {
      if(!final[w]&&(*D)[w]<min)
      {
        k=w;
        min=(*D)[w]//w顶点离V0顶点更近
      }
    }
    final[k]=1;//将目前找到的最近的顶点置为1
    for(w=0lw<G.numVertexes;w++)//修正当前最短路径及距离
    {
      //如果经过v顶点的路径比现在这条路径的长度短的化
      if(!final[w]&&(min+G.arc[k][w]<(*D)[w])
      {//说明找到了更短的路径，修改D[w]和P[w]
        (*D)[w]=min+D.arc[k][w];//修改当前路径长度
        (*p)[w]=k;
      }
    }
  }
}
